---
description: 
globs: 
alwaysApply: false
---
# Google Gemini API Usage (Backend)

> **Note:** As of June 2024, backend AI-powered features (such as structured data generation, roll requirement detection, and narrative generation) use **Google Gemini** via the `@ai-sdk/google` and `ai` packages. This replaces the previous OpenAI-based pattern for backend logic.

## Recommended Pattern: Google Gemini
- Use `@ai-sdk/google` and `ai` for backend AI logic.
- Use `streamObject` with a Zod schema for structured data.

### Example
```typescript
import { google } from "@ai-sdk/google";
import { streamObject } from "ai";
import { z } from "zod";

const mySchema = z.object({
  field: z.string(),
});

const result = await streamObject({
  model: google("gemini-2.0-flash-lite"),
  schema: mySchema,
  prompt: "Generate a field value as a string.",
});

// Access the structured result
const object = result.object;
```

## Migration Note
- If you have existing code using OpenAI for backend features, migrate to Google Gemini for consistency and support.
- See `convex_rules.mdc` for more details and best practices.
